{"version":3,"file":"component---src-templates-post-template-tsx-4a66afc16e3cf64e4023.js","mappings":"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","sources":["webpack://blog/./src/components/TagList.tsx","webpack://blog/./src/components/Comment.tsx","webpack://blog/./src/components/Toc.tsx","webpack://blog/./src/components/post/PostContent.tsx","webpack://blog/./src/components/post/PostImage.tsx","webpack://blog/./src/components/post/PostInfo.tsx","webpack://blog/./src/templates/postTemplate.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\n\ntype TagListType = {\n  list: string[];\n  linkTag?: boolean;\n};\n\nconst Ul = styled.ul<{ linkTag?: boolean }>`\n  margin: 10px 0;\n  display: flex;\n  justify-content: ${({ linkTag }) => (linkTag ? \"center\" : null)};\n  gap: 10px;\n`;\n\nconst Li = styled.li<{ linkTag?: boolean }>`\n  background-color: black;\n  color: white;\n  padding: ${({ linkTag }) => (linkTag ? null : \"2px 5px\")};\n  border-radius: 5px;\n\n  & > a {\n    display: block;\n    padding: 2px 5px;\n  }\n`;\n\nconst TagList: React.FC<TagListType> = (props) => {\n  const { list, linkTag = false } = props;\n\n  return (\n    <Ul linkTag={linkTag}>\n      {list.map((tag) => (\n        <Li key={tag} linkTag={linkTag}>\n          {linkTag ? <Link to={`/category?tag=${tag}`}>{tag}</Link> : tag}\n        </Li>\n      ))}\n    </Ul>\n  );\n};\n\nexport default TagList;\n","import React, { useEffect, useRef } from \"react\";\n\nconst src = \"https://utteranc.es/client.js\";\nconst repo = \"isdebrave/isdebrave.github.io\";\n\nconst Comment = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current === null) return;\n\n    const utterances = document.createElement(\"script\");\n\n    const attributes = {\n      src,\n      repo,\n      \"issue-term\": \"pathname\",\n      label: \"Comment\",\n      theme: \"github-light\",\n      crossorigin: \"anonymous\",\n      async: \"true\",\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    ref.current.appendChild(utterances);\n  }, []);\n\n  return <div ref={ref} />;\n};\n\nexport default Comment;\n","import styled from \"@emotion/styled\";\nimport { Link } from \"gatsby\";\nimport React, { useEffect, useState } from \"react\";\n\nconst TocContainer = styled.aside`\n  position: fixed;\n  right: 50px;\n  top: 50px;\n  margin: 100px 0 0 70px;\n  width: 200px;\n\n  & > hr {\n    margin: 10px 0;\n    border: none;\n    border-top: 1px solid rgba(0, 0, 0, 0.2);\n  }\n\n  @media (max-width: 1400px) {\n    display: none;\n  }\n`;\n\nconst Li = styled.li`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  margin: 10px 0;\n`;\n\nconst Toc = () => {\n  const [hTagsList, setHTagsList] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const post = document.getElementById(\"post-content\")!;\n    const list = Array.from(post.querySelectorAll(\"h1, h2, h3\"));\n\n    /* h1, h2, h3에 id 할당 */\n    list.forEach((item) => {\n      item.id = item.textContent!;\n    });\n\n    setHTagsList(list);\n  }, []);\n\n  return (\n    <TocContainer>\n      <h3>목차</h3>\n      <hr />\n      <ul id=\"toc-list\">\n        {hTagsList.map((hTags) => (\n          <Li key={hTags.textContent}>\n            <Link to={`#${hTags.textContent}`}>{hTags.textContent}</Link>\n          </Li>\n        ))}\n      </ul>\n    </TocContainer>\n  );\n};\n\nexport default Toc;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport \"github-markdown-css/github-markdown.css\";\n\ntype PostContentType = {\n  id: string;\n  html: string;\n};\n\nconst MarkdownBody = styled.div`\n  text-align: center;\n  max-width: 768px;\n  margin: 0 auto;\n  background-color: #eeebe0;\n  color: black;\n  /* 스크랩 색 */\n  color-scheme: light;\n\n  .markdown-body {\n    box-sizing: border-box;\n    min-width: 200px;\n    max-width: 768px;\n    margin: 0 auto;\n    padding: 45px;\n  }\n\n  @media (max-width: 768px) {\n    .markdown-body {\n      padding: 15px;\n    }\n  }\n`;\n\nconst ScrollOnTop = styled.div`\n  h1,\n  h2,\n  h3 {\n    scroll-margin-top: 80px;\n  }\n`;\n\nconst PostContent: React.FC<PostContentType> = (props) => {\n  const { id, html } = props;\n\n  return (\n    <MarkdownBody id={id} className=\"markdown-body\">\n      <ScrollOnTop dangerouslySetInnerHTML={{ __html: html }} />\n    </MarkdownBody>\n  );\n};\n\nexport default PostContent;\n","import styled from \"@emotion/styled\";\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\ntype PostImageType = {\n  image: IGatsbyImageData;\n};\n\nconst ImageWrapper = styled.div`\n  max-height: 400px;\n  text-align: center;\n\n  .gatsby-image-wrapper {\n    max-width: 768px;\n    height: 100%;\n    border-radius: 7px;\n    overflow: hidden;\n    object-fit: cover;\n  }\n`;\n\nconst PostImage: React.FC<PostImageType> = (props) => {\n  const { image } = props;\n\n  return (\n    <ImageWrapper>\n      <GatsbyImage image={image} alt=\"postBackground\" />\n    </ImageWrapper>\n  );\n};\n\nexport default PostImage;\n","import TagList from \"components/TagList\";\nimport React from \"react\";\n\ntype PostInfoType = {\n  title: string;\n  date: string;\n  categories: string[];\n};\n\nconst PostInfo: React.FC<PostInfoType> = (props) => {\n  const { title, date, categories } = props;\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>{title}</h1>\n      <span>{date}</span>\n      <TagList list={categories} linkTag />\n    </div>\n  );\n};\n\nexport default PostInfo;\n","import Comment from \"components/Comment\";\nimport Toc from \"components/Toc\";\nimport Template from \"components/common/Template\";\nimport PostContent from \"components/post/PostContent\";\nimport PostImage from \"components/post/PostImage\";\nimport PostInfo from \"components/post/PostInfo\";\nimport { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { FrontmatterType } from \"types\";\n\ntype PostTemplateType = {\n  data: {\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          html: string;\n          frontmatter: FrontmatterType;\n        };\n      }[];\n    };\n  };\n};\n\nconst PostTemplate: React.FC<PostTemplateType> = (props) => {\n  const { frontmatter, html } = props.data.allMarkdownRemark.edges[0].node;\n  const { gatsbyImageData } = frontmatter.thumbnail.childImageSharp;\n\n  return (\n    <Template>\n      <PostInfo\n        title={frontmatter.title}\n        date={frontmatter.date}\n        categories={frontmatter.categories}\n      />\n      <PostImage image={gatsbyImageData} />\n      <PostContent id=\"post-content\" html={html} />\n      <Comment />\n      <Toc />\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n\nexport const getPostData = graphql`\n  query postQueryData($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Ul","_ref","linkTag","Li","_ref2","props","list","___EmotionJSX","map","tag","key","Link","to","ref","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","TocContainer","hTagsList","setHTagsList","useState","post","getElementById","Array","from","querySelectorAll","item","id","textContent","hTags","MarkdownBody","ScrollOnTop","html","className","dangerouslySetInnerHTML","__html","ImageWrapper","image","GatsbyImage","alt","title","date","categories","style","textAlign","TagList","frontmatter","data","allMarkdownRemark","edges","node","gatsbyImageData","thumbnail","childImageSharp","Template","PostInfo","PostImage","PostContent","Comment","Toc"],"sourceRoot":""}